(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{514:function(t,o,e){"use strict";e.r(o);var v=e(5),_=Object(v.a)({},(function(){var t=this,o=t.$createElement,e=t._self._c||o;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"浏览器主要的进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器主要的进程"}},[t._v("#")]),t._v(" 浏览器主要的进程")]),t._v(" "),e("ol",[e("li",[t._v("浏览器主进程")])]),t._v(" "),e("blockquote",[e("p",[t._v("主进程主要负责浏览器界面的显示与交互，各个页面的管理，创建和销毁其他进程。")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("第三方插件进程")])]),t._v(" "),e("blockquote",[e("p",[t._v("每个类型的插件的对应一个进程，仅当使用该插件时才会创建")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("网络进程")])]),t._v(" "),e("blockquote",[e("p",[t._v("负责发起网络请求")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("GPU进程")])]),t._v(" "),e("blockquote",[e("p",[t._v("最多只有一个，用于3D绘制等")])]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("渲染进程")])]),t._v(" "),e("blockquote",[e("p",[t._v("渲染进程也就是我们常说的浏览器内核，比较常见的浏览器内核包括：Webkit、Blink、Gecko、Trident、KHTML等，渲染进程的内部是一个多线程的，主要负责页面渲染、脚本的执行、事件处理等。")])]),t._v(" "),e("h3",{attrs:{id:"渲染进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程"}},[t._v("#")]),t._v(" 渲染进程")]),t._v(" "),e("ol",[e("li",[t._v("渲染线程")])]),t._v(" "),e("blockquote",[e("p",[t._v("负责渲染浏览器界面，解析HTML和CSS构建DOM树和CSSOM树并合成渲染树、分层树。当界面需要重新渲染或者由于回流（reflow）和重绘（repaint）时该线程就会执行。")])]),t._v(" "),e("blockquote",[e("p",[t._v("渲染线程的执行和js引擎线程的执行时互斥的，同一时间只能有一个线程在运行。")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("js引擎线程")])]),t._v(" "),e("blockquote",[e("p",[t._v("js引擎也称为js内核常见的js内核有v8、JavaScriptCore、SpiderMonkey、KJS等。")])]),t._v(" "),e("blockquote",[e("p",[t._v("js引擎主要负责执行js脚本。")])]),t._v(" "),e("blockquote",[e("p",[t._v("当js引擎执行时间过长会导致渲染线程阻塞也就会造成页面的卡顿。")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("事件触发线程")])]),t._v(" "),e("blockquote",[e("p",[t._v("事件触发进程是属于浏览器的而不是js引擎的，用来控制事件循环。")])]),t._v(" "),e("blockquote",[e("p",[t._v("事件触发线程主要负责当事件触发时通知js引擎来执行事件处理函数。")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("异步http请求线程")])]),t._v(" "),e("blockquote",[e("p",[t._v("主要负责利用XMLHttpRequest对象发起网络请求并将回调放入事件队列中。")])]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("定时器触发线程")])]),t._v(" "),e("blockquote",[e("p",[t._v("当setInterval 与 setTimeout的计时器到期后将其回调添加到事件队列中。")])]),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[t._v("合成线程")])]),t._v(" "),e("blockquote",[e("p",[t._v('负责将渲染线程提交给他的绘制列表和分层树进行分块，会优先对视口区域的图层进行分块，然后再把图块提交给栅格化线程，接收到栅格化后的位图后合成线程会生成一个绘制命令"DrawQuad"，并发送给浏览器进程。')])]),t._v(" "),e("blockquote",[e("p",[t._v("GPU加速就是利用css3中的transform、wall-change、opacity、filter等属性，跳过布局和绘制的流程，直接进入非主线程的合成线程来处理。")])]),t._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[t._v("栅格化线程")])]),t._v(" "),e("blockquote",[e("p",[t._v("将合成线程提交的图块转换为位图，然后在提交给合成线程。")])]),t._v(" "),e("h3",{attrs:{id:"js引擎线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js引擎线程"}},[t._v("#")]),t._v(" js引擎线程")]),t._v(" "),e("ol",[e("li",[t._v("parse解析器")])]),t._v(" "),e("blockquote",[e("p",[t._v("用于对js代码进行词法分析和语法分析，并生成ast。")])]),t._v(" "),e("blockquote",[e("p",[t._v("我们所写的js代码在被浏览器接收完后其实都是一段字符串，词法分析就是将这些字符串根据js的规则解析成token，语法分析就是检查这些token有没有不符合语法规范的，最后检查完成后会生成ast。")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("解释器")])]),t._v(" "),e("blockquote",[e("p",[t._v("解释器负责将ast转换为字节码并解释执行，当发现一段代码执行很频繁时会有编译器编译成机器码提高执行速度，因为机器码生成后的量会很大会占用很大的内存所以不直接将ast转为机器码，而是在一定条件下才会编译成机器码这也就是JIT（即时编译）技术。")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("编译器")])]),t._v(" "),e("blockquote",[e("p",[t._v("在解析器将ast转为字节码并解释执行时如果发现一段代码的执行频率很高就会由编译器来将这部分代码转成机器码提高运行效率。")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("GC（垃圾回收器）")])]),t._v(" "),e("blockquote",[e("p",[t._v("主要负责将堆内存中不再使用到的对象清除掉。")])]),t._v(" "),e("blockquote",[e("p",[t._v("在V8引擎中会把堆内存分为两部分，新生代和老生代。新生代内存主要存放一些临时对象，或者生命周期比较短的对象，而老生代则存放一些生命周期比较长的对象。")])]),t._v(" "),e("blockquote",[e("p",[t._v("新生代内存会将其分成两部分，一部分为form，一部分为to，form表示正在使用的内存空间，当进行垃圾回收时会检查form内存中正在使用的对象然后将其移动到to内存中，并按照顺序从头排列（消除内存碎片），移动完成之后将form和to两者角色对调，如此循环，这种算法也叫做Scavenge算法。")])]),t._v(" "),e("blockquote",[e("p",[t._v("新生代的对象在经过一次Scavenge算法后若下次还在使用中则会将该对象晋升为老生代中，或者从form移动到to的过程中发现to的内存区域已经用了25%了则会直接将这个对象移动到老生代内存中。")])]),t._v(" "),e("blockquote",[e("p",[t._v("老生代的内存回收采用标记清除的方法，可分为两步，第一步遍历堆中所有的对象并将他们打上标记，然后对正在使用的对象和被强引用的变量取消标记，然后删除带有标记的变量。第二步，整理内存空间，V8会将存活的空间不连续的对象全部往一端靠拢，由于是移动对象这一步也是最耗时的。")])]),t._v(" "),e("blockquote",[e("p",[t._v("由于V8在执行垃圾回收时会阻塞代码的执行，如果老生代中的对象很多那么垃圾回收可能会非常耗时，为了避免出现问题在V8中采用了增量标记的方法，即将标记清除任务分为若干个小任务，执行一段然后暂停一段时间，这样能够有效的防止一次性垃圾回收带来js代码执行阻塞的问题。")])]),t._v(" "),e("h3",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("ul",[e("li",[t._v("从 8 道面试题看浏览器渲染过程与性能优化"),e("a",{attrs:{href:"https://juejin.cn/post/6844904040346681358#heading-22",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://juejin.cn/post/6844904040346681358#heading-22"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("(2.4w字,建议收藏)😇原生JS灵魂之问(下), 冲刺🚀进阶最后一公里(附个人成长经验分享)"),e("a",{attrs:{href:"https://juejin.cn/post/6844904004007247880#heading-6",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://juejin.cn/post/6844904004007247880#heading-6"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("(1.6w字)浏览器灵魂之问，请问你能接得住几个？"),e("a",{attrs:{href:"https://juejin.cn/post/6844904021308735502#heading-61",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://juejin.cn/post/6844904021308735502#heading-61"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);o.default=_.exports}}]);